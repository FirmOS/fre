[arrayd | array declaration (var)]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
array[$param(0)..$param(1)] of $param(Type);|
[arrayc | array declaration (const)]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
array[$param(0)..$param(1)] of $param(Type) = (|);
[cases | case statement]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
case $param(var) of
  : |;
  : ;
end;
[casee | case statement (with else)]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
case $param(var) of
  : |;
  : ;
else ;
end;
[classf | class declaration (all parts)]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
T$param(Class) = class(T$param(Base))
private
  |
public
  constructor Create;
  destructor Destroy; override;
end;
[classd | class declaration (no parts)]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
T$param(Class) = class(T$param(Base))
  |
end;
[classc | class declaration (with Create/Destroy overrides)]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
T$param(Class) = class(T$param(Base))
private
  |
protected

public
  constructor Create; override;
  destructor Destroy; override;
published 

end;
[fors | for (no begin/end)]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
for $param(i) := $param(0) to $param(Count - 1) do |;
[forb | for statement]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
for $param(i) := $param(0) to $param(Count-1) do
begin
  |
end;
[function | function declaration]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
function $param(Name)($param( )): $param(Type);
begin
  |
end;
[ifs | if (no begin/end)]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
if $param(Condition) then |
[ifb | if statement]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
if $param(Condition) then begin
  |
end;
[ife | if then (no begin/end) else (no begin/end)]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
if $param(Condition) then
  |
else
[ifeb | if then else]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
if $param(Condition) then begin
  |
end
else begin

end;
[procedure | procedure declaration]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
procedure $param(Name)($param( ));
begin
  |
end;
[ofall | case of all enums]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
of
|$OfAll()end;
[trye | try except]
try
  | 
except

end;
[tryf | try finally]
try
  | 
finally

end;
[trycf | try finally (with Create/Free)]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
$param(variable) := $param(typename).Create;
try
  |
finally
  $param(variable,sync=1).Free;
end;
[whileb | while statement]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
while $param(Condition) do begin
  |
end;
[whiles | while (no begin)]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
while $param(Condition) do |
[withb | with statement]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
with $param(Condition) do begin
  |
end;
[b | begin end]
begin
  |
end;
[withs | with (no begin)]
with | do
[hexc | HexStr(Cardinal(),8)]
HexStr(Cardinal(|),8)
[be | begin end else begin end]
begin
  |
end else begin

end;
[withc | with for components]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
with $param(Component) do begin
  Name:='$param(Name)';
  Parent:=$param(Parent);
  Left:=$param(0);
  Top:=$param(0);
  Width:=$param(1);
  Height:=$param(1);
  Caption:='$param(Caption)';
end;
[d | debugln]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
debugln(['$ProcedureName() '|]);
[_ifd | FirmOS IF def]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
{$IFDEF $param(name)}
 |
{$ELSE}
{$ENDIF}
[_ape | FirmOS FRE Abort Platform Error]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
| GFRE_BT.CriticalAbort('$param(),due to %d <%s>',[err.OS_Errorcode,err.OS_ErrorDetail]);

[_w | FirmOS Writeln]
writeln('|');
[_ifa | FirmOS If Assigned()]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
if assigned(|) then begin
end;
[_tf | Tool Factory]
GFRE_TF.Get_|
[_bt | Basis Tools]
GFRE_BT.|
[_lg | Log]
$(AttributesStart)
EnableMakros=true
$(AttributesEnd)
GFRE_LOG.Log('$param(entry)','$param(cat)',$param(1));
[_p | procedure (]
procedure |
[_f | function]
function |
[_va | ;virtual;abstract;]
;virtual;abstract;
[_c | FirmOS Construcor]
constructor create(|
